# Like what you see? Join us!
# https://www.univention.com/about-us/careers/vacancies/
#
# Copyright 2001-2023 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

import time

import pytest
from playwright.sync_api import Page

from e2e.decorators import retrying
from e2e.email.password_reset import PasswordResetEmail
from umspages.common.base import expect
from umspages.portal.home_page.logged_in import HomePageLoggedIn
from umspages.portal.home_page.logged_out import HomePageLoggedOut
from umspages.portal.login_page import LoginPage
from umspages.portal.selfservice.base import SelfservicePortal
from umspages.portal.selfservice.change_password import ChangePasswordDialogPage
from umspages.portal.selfservice.manage_profile import ManageProfileDialogPage
from umspages.portal.selfservice.password_forgotten import PasswordForgottenPage
from umspages.portal.selfservice.set_new_password import SetNewPasswordPage
from umspages.portal.selfservice.set_recovery_email import SetRecoveryEmailDialogPage
from umspages.portal.users.users_page import UCSUsersPage

from tests.portal.conftest import WaitForUserExists

DUMMY_USER_PASSWORD_2 = "secondpass"
DUMMY_EMAIL = "mail@example.org"
DUMMY_TELEPHONE = "123456789"


@pytest.fixture()
def dummy_username(faker):
    yield f"test-{ faker.user_name() }"


@pytest.mark.portal
@pytest.mark.development_environment
@pytest.mark.acceptance_environment
def test_portal_tiles_and_central_navigation_update(user, ensure_user_exists: WaitForUserExists):
    """
    Prerequisite for all other selfservice tests.
    If the portal-consumer does not work, nothing else will either.
    """
    username = user.properties["username"]
    ensure_user_exists(username)


@pytest.mark.selfservice
@pytest.mark.portal
@pytest.mark.development_environment
@pytest.mark.acceptance_environment
def test_user_changes_password_via_side_menu(
    navigate_to_login_page: Page,
    user,
    user_password: str,
    ensure_user_exists: WaitForUserExists,
    wait_for_ldap_secondaries_to_catch_up,
):
    username = user.properties["username"]
    ensure_user_exists(username)

    page = navigate_to_login_page
    change_password_page = ChangePasswordDialogPage(page)
    change_password_page.navigate(username, user_password)
    change_password_page.change_password(user_password, DUMMY_USER_PASSWORD_2)
    wait_for_ldap_secondaries_to_catch_up()

    dummy_user_home_logged_out = HomePageLoggedOut(page)
    dummy_user_home_logged_out.navigate()

    assert_user_can_log_in(page, username, DUMMY_USER_PASSWORD_2)


@pytest.mark.selfservice
@pytest.mark.portal
@pytest.mark.development_environment
@pytest.mark.acceptance_environment
def test_set_recovery_email(user, user_password, ensure_user_exists: WaitForUserExists, page):
    """
    Tests a user can set up a recovery email.

    1. Logs in as the dummy user.
    2. Sets a dummy recovery email from the side-menu.
    3. Logs out from the dummy user.
    4. Logs in again to the dummy user.
    5. Triggers the recovery email window and checks the recovery email is the
    same.
    """
    username = user.properties["username"]
    ensure_user_exists(username)

    set_recovery_email_page = SetRecoveryEmailDialogPage(page)
    set_recovery_email_page.navigate(username, user_password)
    expect(set_recovery_email_page.submit_button).to_be_visible(timeout=10000)
    set_recovery_email_page.set_recovery_email(DUMMY_EMAIL)

    dummy_user_home_logged_out = HomePageLoggedOut(page)
    dummy_user_home_logged_out.navigate()

    set_recovery_email_page = SetRecoveryEmailDialogPage(page)
    set_recovery_email_page.navigate(username, user_password)
    expect(set_recovery_email_page.submit_button).to_be_visible(timeout=10000)
    expect(set_recovery_email_page.email_box).to_have_value(DUMMY_EMAIL)
    expect(set_recovery_email_page.retype_email_box).to_have_value(DUMMY_EMAIL)


@pytest.mark.selfservice
@pytest.mark.portal
@pytest.mark.development_environment
@pytest.mark.acceptance_environment
def test_manage_profile(user, user_password, ensure_user_exists: WaitForUserExists, page):
    """
    Tests a user can manage their profile.
    1. Logs in as the dummy user.
    2. Sets a telephone number on his profile.
    3. Logs out from the dummy user.
    4. Logs in as the dummy user.
    5. Sets a new profile picture on his profile.
    6. Logs out from the dummy user.
    7. Logs in again to the dummy user.
    8. Checks the telephone number remains the same.
    9. Checks the profile picture using the UDM REST API
    """
    username = user.properties["username"]
    ensure_user_exists(username)

    manage_profile_page = ManageProfileDialogPage(page)
    manage_profile_page.navigate(username, user_password)
    expect(manage_profile_page.save_button).to_be_visible()
    manage_profile_page.change_telephone(DUMMY_TELEPHONE)

    manage_profile_page.navigate(username, user_password)
    expect(manage_profile_page.save_button).to_be_visible()
    manage_profile_page.change_profile_picture()

    dummy_user_home_logged_out = HomePageLoggedOut(page)
    dummy_user_home_logged_out.navigate()

    set_recovery_email_page = ManageProfileDialogPage(page)
    set_recovery_email_page.navigate(username, user_password)
    expect(set_recovery_email_page.save_button).to_be_visible(timeout=10000)
    expect(set_recovery_email_page.telephone_box).to_have_value(DUMMY_TELEPHONE)

    user.reload()
    assert (
        user.properties["jpegPhoto"]
        == "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAJCAkQDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD3+iiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoqpqWqWOj2bXeo3cVtAufmkbGTgnAHUnAPA5OK8w8SfGH/AFlt4etvVftlwv1GUT/vkgt9CtTKajuduEy/EYt2pR079PvPTNW1nT9CsTe6ndJb24YLuYEkk9AAMkn6DoCe1eT+IfjDeXO6HQLb7JH/AM/E6hpD0PC8qv8AEOd2QexrzvUtUvtYvGu9Ru5bmds/NI2cDJOAOgGSeBwM1UrCVVvY+vwHD1Ch71f35fh93X5/cW/7V1H+0f7R+33X27/n585vM6bfvZz04+leieHvjDeW22HX7b7XH/z8QKFkHU8rwrfwjjbgDua8woqFJrY9bE4DD4mPLVinbbuvRn1JpGvaXr1uZ9LvYrlF+8FOGTkgblOCucHGRzitGvlC1uriyuEuLS4lt50ztkicoy5GDgjkcEivT/C3xdmjcW3iRfNjOAt3DGAyktyXUcEAH+EZ+XoSa2jVT3Pksdw5VpJzw75l26/8H8PQ9goqppuqWOsWa3enXcVzA2PmjbODgHBHUHBHB5Gat1sfNyi4vlkrMKKKKBBRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFVNS1Sx0eza71G7itoFz80jYycE4A6k4B4HJxXmHiT4w/6y28PW3qv2y4X6jKJ/wB8kFvoVqZTUdztwmX4jFu1KOnfp956fqWqWOj2bXeo3cVtAufmkbGTgnAHUnAPA5OK8w8SfGH/AFlt4etvVftlwv1GUT/vkgt9CteX6lql9rF413qN3Lcztn5pGzgZJwB0AyTwOBmqlYSqt7H1uC4coUbSrvnf4f8AB/rQt6lql9rF413qN3Lcztn5pGzgZJwB0AyTwOBmqlFFZH0UYqK5YqyCiiigYUUUUAFFFFAFvTdUvtHvFu9Ou5badcfNG2MjIOCOhGQODwcV6h4b+MP+rtvENt6L9st1+gy6f99ElfoFrySiqjNx2OLF5fh8WrVY69+v3n1VpuqWOsWa3enXcVzA2PmjbODgHBHUHBHB5Gat18q6bql9o94t3p13LbTrj5o2xkZBwR0IyBweDivUPDfxh/1dt4htvRftluv0GXT/AL6JK/QLW8aqe58ljeHK9G8qD51+P/B/rQ9aoqppuqWOsWa3enXcVzA2PmjbODgHBHUHBHB5Gat1qfOyi4vlkrMKKKKBBRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUVDdXVvZW73F3cRW8CY3SSuEVcnAyTwOSBXm3iH4w2dtuh0C2+1yf8/E6lYx0PC8M38Q524I7iplJR3OvC4HEYuVqMb+fRfM9Jurq3srd7i7uIreBMbpJXCKuTgZJ4HJArzbxD8YbO23Q6Bbfa5P8An4nUrGOh4Xhm/iHO3BHcV5Vq+vapr1wJ9UvZbl1+6GOFTgA7VGAucDOBzis6sZVm9j6zBcN0qdpYh8z7dP8AN/h6F7VtZ1DXb43up3T3FwVC7mAAAHQADAA+g6knvVGiisT6WMIwioxVkgooooGFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAW9N1S+0e8W7067ltp1x80bYyMg4I6EZA4PBxXqHhv4w/6u28Q23ov2y3X6DLp/wB9ElfoFrySiqjNx2OLF5fh8WrVY69+v3n1VpuqWOsWa3enXcVzA2PmjbODgHBHUHBHB5Gat18q6bql9o94t3p13LbTrj5o2xkZBwR0IyBweDivUvC/xeV2S18RxpGNp/02FTgkAY3IAeTg8rxkj5QOa3jVT3Pksdw7Xo3nQfOu3X/g/L7j1iiobW6t723S4tLiK4gfO2SJw6tg4OCODyCKmrU+daadmFFFFAgooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAopksscELzTSJHFGpZ3c4VQOSST0FefeJPi1pem+Zb6Qn9o3QyvmZ2woeR16vggHjgg8NScktzpw2Dr4qXLRjf8vvO+urq3srd7i7uIreBMbpJXCKuTgZJ4HJArzbxD8YbO23Q6Bbfa5P+fidSsY6HheGb+Ic7cEdxXluu+IdT8RXzXWo3LyHcSkQJ8uIHHCL2HA9zjnJ5rLrCVVvY+uwPDdKnaeJfM+3T/N/h6Gjq+vapr1wJ9UvZbl1+6GOFTgA7VGAucDOBzis6iisdz6SEIwiowVkuwUUUUFBRRRQAUUUUAFFFPiiknmSGGN5JZGCoiDLMTwAAOpoBuwynxRSTzJDDG8ksjBURBlmJ4AAHU16D4b+Euqal5dxq7/2danDeXjdM44PTomQSOeQRytesaD4V0bw3CF02zRJSu17h/mlfpnLHsdoOBgZ7VpGk3ueFjc/w2HvGn78vLb7/APK54zF8KvE82kJfLDbiR1DC0eTbNgnuCAoOOcFs/jxXH3VrcWVw9vd28tvOmN0cqFGXIyMg8jgg19X1navoOl69biDVLKK5Rfulhhk5BO1hgrnAzg84rR0V0PIw3E9VTft43i+26/z/AA9T5bor0fxR8JtQ05nudDL31mFBMTMPPXAJPGAGHHGOecYOM153LFJBM8M0bxyxsVdHGGUjggg9DWDi47n1eFxlDFR5qMr/AJr1QyiiikdIUUUUAFFFFABRRRQBo6Rr2qaDcGfS72W2dvvBTlX4IG5TkNjJxkcZr1Xw98YbO52w6/bfZJP+fiBS0Z6nleWX+Ecbsk9hXjNFVGbjscGMyzDYxfvY691o/wCvW59X2t1b3tulxaXEVxA+dskTh1bBwcEcHkEVNXy3pGvapoNwZ9LvZbZ2+8FOVfggblOQ2MnGRxmvVfD3xhs7nbDr9t9kk/5+IFLRnqeV5Zf4RxuyT2Fbxqp7nyON4exFC8qPvx/H7uvy+49PoqG1ure9t0uLS4iuIHztkicOrYODgjg8gipq1PAaadmFFFFAgooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACimSyxwQvNNIkcUalndzhVA5JJPQV594k+LWl6b5lvpCf2jdDK+ZnbCh5HXq+CAeOCDw1JyS3OnDYOvipctGN/wAvvPQZZY4IXmmkSOKNSzu5wqgckknoK8+8SfFrS9N8y30hP7RuhlfMzthQ8jr1fBAPHBB4avJ9e8Vaz4kmLaleO8QbclunyxJ1xhR3G4jJycd6xqwlWfQ+swXDVOFpYl8z7Lb793+Bs694q1nxJMW1K8d4g25LdPliTrjCjuNxGTk471jUUVi3fc+lp04UoqEFZeQUUUUFhRRRQAUUUUAFFFFABT4opJ5khhjeSWRgqIgyzE8AADqa9B8N/CXVNS8u41d/7OtThvLxumccHp0TIJHPII5WvWNB8K6N4bhC6bZokpXa9w/zSv0zlj2O0HAwM9q0jSb3PCxuf4bD3jT9+Xlt9/8Alc8n8N/CXVNS8u41d/7OtThvLxumccHp0TIJHPII5WvWNB8K6N4bhC6bZokpXa9w/wA0r9M5Y9jtBwMDPatmit4wUdj5HG5ricXpOVo9lt/wfmFFFFWeaFFFFABWNr3hXRvEkJXUrNHlC7UuE+WVOuMMOw3E4ORntWzRSavuXTqTpSU4Oz8jw7xJ8JdU03zLjSH/ALRtRlvLxtmQcnp0fAAHHJJ4WvPpYpIJnhmjeOWNiro4wykcEEHoa+sqxte8K6N4khK6lZo8oXalwnyyp1xhh2G4nByM9qylRXQ+mwXEtSFo4lcy7rf7tn+B8x0V6J4k+Euqab5lxpD/ANo2oy3l42zIOT06PgADjkk8LXn0sUkEzwzRvHLGxV0cYZSOCCD0NYOLW59XhsZQxUeajK/5/cMooopHSFFFFABRRRQAUUUUAaOka9qmg3Bn0u9ltnb7wU5V+CBuU5DYycZHGa9V8PfGGzudsOv232ST/n4gUtGep5Xll/hHG7JPYV4zRVRm47HBjMsw2MX72OvdaP8Ar1ufV9rdW97bpcWlxFcQPnbJE4dWwcHBHB5BFTV8t6Rr2qaDcGfS72W2dvvBTlX4IG5TkNjJxkcZr1rwt8WrPUXFrryRWE5wEnQnynJbGCDkpwRySRwSSOBW8aqe58hjuH8Rh050vfj+P3f5fcelUUyKWOeFJoZEkikUMjocqwPIII6in1qeA1YKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoorkvFvxB0vwtut/8Aj71IbT9lRtu0HuzYIXjnHJ5HGDmk2lqzahh6uImqdKN2dbXDeIfiloWjborJv7Tuh/DA4EY6HmTkdCfuhuRg4ryXxD4313xLujvbry7U/wDLrACkfbqM5blQfmJwemK52sJVv5T6zBcMxVpYp38l+r/yt6mzr3irWfEkxbUrx3iDbkt0+WJOuMKO43EZOTjvWNRRWLd9z6inThSioQVl5BRRRQWFFFFABRRRQAUUUUAFFdz4e+Fuu6ztlvV/sy1P8U6EyHqOI+D1A+8V4ORmvWvD3gjQvDW2SytfMuh/y9TkPJ36HGF4Yj5QMjrmtI02zxcbnuFw14xfPLsv1f8Aw55L4e+Fuu6ztlvV/sy1P8U6EyHqOI+D1A+8V4ORmvWvD3gjQvDW2SytfMuh/wAvU5Dyd+hxheGI+UDI65roqK3jTUT5DG5xisXeMnaPZfr3CiiirPLCiiigAooooAKKKKACiiigAooooAKxte8K6N4khK6lZo8oXalwnyyp1xhh2G4nByM9q2aKTV9y6dSdKSnB2fkeHeJPhLqmm+ZcaQ/9o2oy3l42zIOT06PgADjkk8LXn0sUkEzwzRvHLGxV0cYZSOCCD0NfWVY2veFdG8SQldSs0eULtS4T5ZU64ww7DcTg5Ge1ZSorofTYLiWpC0cSuZd1v92z/A+Y6K7vxN8LtZ0iaWfTIn1Gx3fJ5XMyDjAZAOTz1XPQkhelcJWDi1ufW4fFUcTDnpSuv637BRRRSNwooooAKKKKACiiigDZ0HxVrPhuYNpt46RFtz27/NE/TOVPc7QMjBx3r1jw38WtL1Ly7fV0/s66OF8zO6FzwOvVMkk88ADlq8OoqozcdjzcblWGxes42l3W/wDwfmfWUUsc8KTQyJJFIoZHQ5VgeQQR1FPr5j0HxVrPhuYNpt46RFtz27/NE/TOVPc7QMjBx3r2Hwj8TdP19o7LUFSx1F2VEXJMcxI/hOPlOQflJ7gAkmuiNVM+Qx+Q4jCpzh70V23+aO7ooorQ8MKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoorj/iH4uk8K6LH9j2f2hdsUhLDIQAfM+MYJGVAB7tnkAik2krs2w9CeIqxpU92YHxF+Iv2DzdE0Sb/AEvlLm6Q/wCp9UU/3/U/w9Pvfd8cllknmeaaR5JZGLO7nLMTySSepollknmeaaR5JZGLO7nLMTySSepplckpOTufpOAwFLBUlCC16vuFFFFSdwUUUUAFFFFABRRRQAUV1vhv4da74h8ubyfsVi2D9ouARuU4OUXq3ByDwpx1r1vw38OtC8PeXN5P22+XB+0XAB2sMHKL0XkZB5YZ61cabkeRjc7wuFvG/NLsv1fQ8w8PfC3XdZ2y3q/2Zan+KdCZD1HEfB6gfeK8HIzXrXh7wRoXhrbJZWvmXQ/5epyHk79DjC8MR8oGR1zXRUV0RpqJ8bjc4xWLvGTtHsv17hRRRVnlhRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABXO+IfBGheJd0l7a+XdH/l6gISTt1OMNwoHzA4HTFdFRSaT3NKVapRlz05NPyPA/EPwt13Rt0tkv9p2o/igQiQdBzHyepP3S3AycVw1fWtc74h8EaF4l3SXtr5d0f+XqAhJO3U4w3CgfMDgdMVjKj/KfUYLiaStHFK/mv1X+VvQ+bKK7nxD8Ldd0bdLZL/adqP4oEIkHQcx8nqT90twMnFcNWLTW59Vh8VRxMeejJNf1v2CiiikbhRRRQAUUUUAFFFFAHqvgT4nTJcJpniO53wvhYb2TAMZxgCQ9wf7x5B6kg5HsFfJVe6fDDxlJrti+l6jM8uo2q7lkZeZIeBkt3YE4OcZBB5OTW9Kd9GfHZ9lEYL6zQVl1X6r9f+HPQaKKK3PkwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK+Y/FWvSeJPEV1qTFxEzbYEb+CMcKMZOD3ODjJJ717l8RtWXSfBF+cp5t0v2WNWUkMX4bp0OzeQTxkfgfnSsK0uh9jwxhUozxDXkv1/T7gooorA+sCiiigAooooAKK63w38Otd8Q+XN5P2KxbB+0XAI3KcHKL1bg5B4U461634b+HWheHvLm8n7bfLg/aLgA7WGDlF6LyMg8sM9auNNyPIxud4XC3jfml2X6voeSeG/h1rviHy5vJ+xWLYP2i4BG5Tg5RercHIPCnHWvW/Dfw60Lw95c3k/bb5cH7RcAHawwcovReRkHlhnrXW0VvGmonyGNzvFYq8b8sey/V9QooorQ8gKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACud8Q+CNC8S7pL218u6P/L1AQknbqcYbhQPmBwOmK6Kik0nuaUq1SjLnpyafkeB+IfhbrujbpbJf7TtR/FAhEg6DmPk9SfuluBk4rhq+ta53xD4I0LxLukvbXy7o/8AL1AQknbqcYbhQPmBwOmKxlR/lPqMFxNJWjilfzX6r/K3ofNlFdh4o+HOs+HGeaKN7/T1UMbmFOV4JO5MkqBg88jGOcnFcfWLTWjPq6GIpYiHPSldBRRRSNgooooAK0dB1ebQdds9UgG57eTcV4G9Twy5IOMqSM44zWdRRsTOEZxcJK6eh9X2t1De2cF3bvvgnjWSNsEblYZBweRwamrgfhFqX2vwcbNmi32Vw6BFPzbG+cFhnuzOAePu+xrvq7Yu6ufluMw7w9edHs/+GCiiimcwUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQB5b8ar2RNN0mxCp5U00kzEj5gUAAx7fvD+leOV638bf8AmBf9vH/tOvJK5KvxM/RcgSWXwa63/NhRRRUHsBRRRQBs+G/C+p+Kb5rXTo0AjXdLNKSI4x2yQDycYAAJ69gSPZvDPwy0bw/NFdzs9/fRtuSWUbUQjOCqA9eR1J5AIxWd8GYox4WvZhGgla9ZWcD5iAiEAn0G4/mfWvR66KcFa58Nnea4h154eD5YrTTr6sKKKK2PmwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACuS8SfDrQvEPmTeT9ivmyftFuANzHJy69G5OSeGOOtdbRSaT3NqGIq0Jc9KTTPmzxb4OvvCN5FHdSRTQXG4wTRn7wU8gqeQcFT3HPBPNc7X0F8U7WG48A3skqbnt5IpIjkjaxcJn3+VmHPrXz7XLUjyuyP0LJsdPGYbnqfEnZ+fX9QoooqD1QooooA9P+C195esapYeXnzrdZt+77uxsYx7+Z+nvXs1eHfBr/kb7v/rwf/0ZHXuNdVL4T8+4hiljpNdUvyCiiitDwwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDyX42/8wL/t4/8AadeSV758WbH7X4Glm8zZ9kuI5sbc78ny8e338/hXgdctVe8foXD1VTwMYr7La/G/6hRRRWZ7YUUUUAdt8PPGy+Fr6S1vQ7abdMC5BJMLDjeF7js2BnAGOmD7ppuqWOsWa3enXcVzA2PmjbODgHBHUHBHB5Ga+VavaTrOoaFfC90y6e3uApXcoBBB6gg5BH1HUA9q0hUcdGeDmeRQxcnVpvln+D/r+kfU9FeYeHvjDZ3O2HX7b7JJ/wA/ECloz1PK8sv8I43ZJ7CvSbW6t723S4tLiK4gfO2SJw6tg4OCODyCK6IyUtj4vFYHEYSVq0befR/MmoooqjkCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiimSyxwQvNNIkcUalndzhVA5JJPQUAlcfUN1dW9lbvcXdxFbwJjdJK4RVycDJPA5IFcD4k+LWl6b5lvpCf2jdDK+ZnbCh5HXq+CAeOCDw1eP6vr2qa9cCfVL2W5dfuhjhU4AO1RgLnAzgc4rKVVLY9/AcP4jEe9V9yPnu/l/n+J23xH8f2+vwppOkM7WIZZJpzuTziOihTj5RnPI5IGMYyfOKKK55Scndn2uEwlLCUlSpbIKKKKR0hRRRQB6P8GYpD4pvZhG5iWyZWcD5QS6EAn1O0/kfSvbq8z+DOmSW+i6hqT7wt3MsaKyYBEYPzA9wS5HsVP4emV1UlaJ+dZ9VVTHTt0svw/zCiiitDxwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigCvqFlHqWm3VjMzrFcwvC5Q4YBgQcZ7818u6pptxo+qXOnXa7Z7eQo3BAOOhGQDgjBB7givqqvLfiz4Ra6hHiKxidpolCXcaIOYxn94e5I4B68Y6BTWVWN1c+i4exyoV3Rm9J/n0+//I8cooormPuwooooAKKKKACtfw/4l1TwzeNcaZceXvwJY2G5JQDnDD8xkYIycEZrIooTsRUpwqRcJq6fRnuPhv4taXqXl2+rp/Z10cL5md0LngdeqZJJ54AHLV6DFLHPCk0MiSRSKGR0OVYHkEEdRXybW/4b8Zaz4WZhp8yNbu257eZd0bHGM9iD06EZwM5xW0a3c+Zx3DcJJzwrs+z2+/p/Wx9LUVw3h74paFrO2K9b+zLo/wAM7gxnqeJOB0A+8F5OBmu5rdNPY+SxGFrYaXJWi0/627hRRRTMAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAorj/FHxG0bw4rwxSJf6grBTbQvwvJB3PghSMHjk5xxg5rxzxD4313xLujvbry7U/wDLrACkfbqM5blQfmJwemKzlUUT2cBkeJxfvP3Y93+i/wCGXmeseJvijo2kQywaZKmo3235PK5hQ8YLODyOei56EEr1rx7XvFWs+JJi2pXjvEG3Jbp8sSdcYUdxuIycnHesaisJTcj7HA5ThsGrwV5d3v8A8AKKKKg9MKKKKACiiigAp8UUk8yQwxvJLIwVEQZZieAAB1NMr0z4UeEWvb4eIL2JxbWzf6KrICs0nILc9l7ED73Q/KRTjHmdjlxuLhhKEq0+n4voj1Xw5pK6F4dsNMAQNBCBJsYlTIeXIJ5wWJP49q1KKK7Vofl9ScqknOW71CiiiggKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKZLFHPC8M0aSRSKVdHGVYHggg9RT6KATseC+P/AEnhuZtR05Xk0mRuR1a2J/hY919G/A84LcJX1lLFHPC8M0aSRSKVdHGVYHggg9RXj/i74TSWqyX3h0vNCqs72btukHPSPj5hg9Dz8vVicVzzpdUfaZRn0ZxVHFO0uj7+vn59Ty2inyxSQTPDNG8csbFXRxhlI4IIPQ0ysT6lO4UUUUAFFFFABRRRQAV1Xhfx/rPhdUtomS508MSbWboMkE7W6qeD6jJJwTXK0U02tUZV6FKvDkqxuj6I8N/EXQvEPlw+d9ivmwPs9wQNzHAwjdG5OAOGOOldbXyVXZ+FviTq/htBbSj+0LEYxFNIQ0YC4ARudo6cYI44xkmto1v5j5XHcNWTnhX8n+j/wA/vPoKiud8PeN9C8S7Y7K68u6P/LrOAknfoM4bhSflJwOuK6Ktk09j5WrRqUZclSLT8wooopmYUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRWB4k8ZaN4WVRqEztcOu5LeFd0jDOM9gB16kZwcZxXkXiH4pa7rO6Kyb+zLU/wwOTIeh5k4PUH7oXg4OaiVRRPUwOUYnGe9FWj3e3y7nqninx3pHhZDHK/wBpvjkC1hYFlO3IL/3Acj35yAcGvH/EnxF13xD5kPnfYrFsj7PbkjcpyMO3VuDgjhTjpXJUVzyqOR9jgckw2FSk1zS7v9F0CiiioPYCiiigAooooAKKKKACiivR/BvwuvdSmhvtdie1sQxzbPlJpcdiMfKp5568cAZDU4xcnZHNisXRwtP2lV2X4v0MLwT4JuvFt9uYvBpsLYnuAOSeuxPVv0A5PYH6FtbWGys4LS3TZBBGsca5J2qowBk8ngU2wsLXS7GGysoEgtoV2pGvQD+p7knknk1YrqhBRR+f5pmc8dUvtFbL9X5hRRRVnlhRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRTJZY4IXmmkSOKNSzu5wqgckknoK8q8UfF5UZ7Xw5Gkg2j/TZlOASDnahA5GRy3GQflI5qZSUdzsweBr4yXLRjfu+i+Z6xXO33jzwtp/l+drdq+/OPIJmxjHXYDjr3618+6vr2qa9cCfVL2W5dfuhjhU4AO1RgLnAzgc4rOrJ1uyPpaHC8bXr1Pkv83/kfRH/AAs3wf8A9Bf/AMlpv/iKfF8SfCM0yRLrCBnYKC8Mirk+pKgAe54r50oqfbSOl8MYT+aX3r/I+qrHVdO1PzPsF/a3fl43+RMsm3OcZweM4P5Vbr5NilkgmSaGR45Y2DI6HDKRyCCOhrtvD3xS13RtsV639p2o/hnciQdTxJyepH3g3AwMVarLqebiuGKsFzUJc3k9H/l+R75RXO+HvG+heJdsdldeXdH/AJdZwEk79BnDcKT8pOB1xXRVqmnsfN1aNSjLkqRafmFFFFMzMbXvCujeJISupWaPKF2pcJ8sqdcYYdhuJwcjPavHvE3wu1nSJpZ9MifUbHd8nlczIOMBkA5PPVc9CSF6V71RUSgpHp4HNsTg3aDvHs9v+AfJVFfSfiHwRoXiXdJe2vl3R/5eoCEk7dTjDcKB8wOB0xXjPiT4da74e8ybyfttiuT9otwTtUZOXXqvAyTyoz1rCVNxPssBneGxfuv3Zdn+j6/gclRRRWZ7AUUUUAFFFFABRRRQAV6D4X+Kup6QqWuqq+o2oY/vWc+egJGfmP3gPmwDzz94AYrz6impNbHPicJRxUOStG6PpzQfFWjeJIQ2m3iPKF3Pbv8ALKnTOVPYbgMjIz3rZr5NilkgmSaGR45Y2DI6HDKRyCCOhr0nwz8XbqwhitNct3vIUXaLmI/vsDP3gThz90ZyDwSdxreNVPc+Sx/DdSn7+GfMuz3/AOCe00VnaRr2l69bmfS72K5RfvBThk5IG5TgrnBxkc4rRrbc+ZnCUJOM1ZruFFFFBIUUUUAFFFFABRRRQAUUUUAFFZ2r69peg24n1S9itkb7oY5Z+QDtUZLYyM4HGa8q8Q/GG8ud0OgW32SP/n4nUNIeh4XlV/iHO7IPY1MpqO534PLMTjH+6jp3ei/r0uem694q0bw3CW1K8RJSu5LdPmlfrjCjsdpGTgZ715P4k+LWqal5lvpCf2danK+ZndM45HXomQQeOQRw1cDdXVxe3D3F3cS3E743SSuXZsDAyTyeABUNc8qrex9jgcgw2HtKp78vPb7v8x8ssk8zzTSPJLIxZ3c5ZieSST1NMoorM91KwUUUUAFFFFABRRRQAUUV1XhfwBrPihUuYlS208sQbqbocEA7V6seT6DIIyDTSb0RlXr0qEOerKyOVrs/C3w21fxIguZT/Z9icYlmjJaQFcgovG4dOcgc8ZwRXqvhv4daF4e8ubyftt8uD9ouADtYYOUXovIyDywz1rra2jR/mPlcdxLdOGFXzf6L/P7jnfD3gjQvDW2SytfMuh/y9TkPJ36HGF4Yj5QMjrmuioorZJLY+Vq1qlaXPUk2/MKKKKZmFFQ3V1b2Vu9xd3EVvAmN0krhFXJwMk8DkgVyWpfFLwtp+5Uu5b2RZCjJaxE4xnkM2FI46gnORjik5Jbm9HC167/dQb9EdnRXlV18a7dLh1tNDllgGNry3AjY8c5UKwHOe5qL/hdv/Uvf+Tv/ANrqfaR7noLIswav7P8AFf5nrVFed2vxj0CbyFuLS/t3faJG2K6Rk9TkNkgf7ufbtXYaT4j0bXVB0zUbe4YqW8tWxIADgkocMBn1HcetNST2Zx18BiaCvVg0vw+81KKKKo5AooooAKKKKACq9/f2ul2M17ezpBbQrueRugH9T2AHJPAqxXz14/8AGUnifV2htpnOk27f6Om3bvOMF2Hc9cZxgdgScxOfKj0sry6WOrci0it3/XVkPjbxtdeLb7aoeDTYWzBbk8k9N7+rfoBwO5PK0UVyttu7P0ahQp0Kap01ZIKKKKRqFFFFABRRRQAV6D4X+Kup6QqWuqq+o2oY/vWc+egJGfmP3gPmwDzz94AYrz6impNbHPicJRxUOStG6PpzQfFWjeJIQ2m3iPKF3Pbv8sqdM5U9huAyMjPetmvk2KWSCZJoZHjljYMjocMpHIII6GvSfDPxdurCGK01y3e8hRdouYj++wM/eBOHP3RnIPBJ3Gt41U9z5LH8N1Kfv4Z8y7Pf/gntNFZ2ka9pevW5n0u9iuUX7wU4ZOSBuU4K5wcZHOK0a23PmZwlCTjNWa7hRRRQScl4k+HWheIfMm8n7FfNk/aLcAbmOTl16Nyck8Mcda8c8TeB9Z8MTStPbvPYq3yXkS5QjjBbGdh+YDB75wT1r6QorOVNSPYwGd4nCe63zR7P9H0/LyPkqivfPEPwt0LWd0tkv9mXR/igQGM9BzHwOgP3SvJyc145r3hXWfDcxXUrN0iLbUuE+aJ+uMMO52k4ODjtWEoOJ9lgc3w2M0g7S7Pf5dzGoooqD0wooooAKKKKACiiigCa1uriyuEuLS4lt50ztkicoy5GDgjkcEivVfDfxh/1dt4htvRftluv0GXT/vokr9AteSUVUZOOxx4zAYfGRtWjfz6o+qtN1Sx1izW7067iuYGx80bZwcA4I6g4I4PIzVuvlXTdUvtHvFu9Ou5badcfNG2MjIOCOhGQODwcV6x4Z+L1rLDFa+IY3hmVcG8iXcjkZ5ZQMqeAOAQST90VvGqnufIY/h2vQ9+h78fx+7r8vuPUqKhtbq3vbdLi0uIriB87ZInDq2Dg4I4PIIqatT55pp2YUUUUCCiobq6t7K3e4u7iK3gTG6SVwirk4GSeByQK828Q/GGztt0OgW32uT/n4nUrGOh4Xhm/iHO3BHcVMpKO514XA4jFytRjfz6L5nompapY6PZtd6jdxW0C5+aRsZOCcAdScA8Dk4rzDxJ8Yf8AWW3h629V+2XC/UZRP++SC30K15fqWqX2sXjXeo3ctzO2fmkbOBknAHQDJPA4GaqVhKq3sfX4LhyhRtKu+d/h/wAH+tCxf391ql9Ne3s7z3MzbnkbqT/QdgBwBwKr0UVkfRRioqy2CiiigYUUUUAFFFFABRRWzoPhXWfEkwXTbN3iDbXuH+WJOmcse43A4GTjtQlfYipUhSi5zdl5mNXReHvBGu+Jdslla+Xan/l6nJSPv0OMtypHyg4PXFen+G/hLpem+Xcau/8AaN0MN5eNsKHg9Or4II54IPK16DFFHBCkMMaRxRqFREGFUDgAAdBW0aP8x8xj+JIR9zCq77vb5I4nw98LdC0bbLer/ad0P4p0AjHUcR8joR94tyMjFdzRRW6SWx8niMVWxMuetJt/1t2CiiimYBRUN1dW9lbvcXdxFbwJjdJK4RVycDJPA5IFebeIfjDZ226HQLb7XJ/z8TqVjHQ8LwzfxDnbgjuKmUlHc68LgcRi5Woxv59F8z0m6ureyt3uLu4it4ExuklcIq5OBkngckCvK/Enxh/1lt4etvVftlwv1GUT/vkgt9Ctea6vr2qa9cCfVL2W5dfuhjhU4AO1RgLnAzgc4rOrCVVvY+uwHDlKl72IfM+3T/g/1oW9S1S+1i8a71G7luZ2z80jZwMk4A6AZJ4HAzVSiisj6OMVFcsVZBRRRQMKKKKAO58PfFLXdG2xXrf2naj+GdyJB1PEnJ6kfeDcDAxXsvh/xLpfiaza40y48zZgSxsNrxEjOGH5jIyDg4JxXzDViwv7rS76G9sp3guYW3JIvUH+o7EHgjg1pGq1ueHmGQ0MSnKmuSfls/VfqvxPq2iuV8E+NrXxbY7WCQalCuZ7cHgjpvT1X9QeD2J6qulNNXR8HXoVKFR06is0FFFFMyOE+KviCTR/DK2dtIi3Gos0LBkyfJ2/Pg9AeVHPZjj1Hgtdn8UtS/tDxzcorRPHaRpbo0ZznA3MDz1DMw9sY61xlclSV5H6PkmFWHwce8tX89vwCiiioPWCiiigAooooAKKKKACiiigAooooAmtbq4srhLi0uJbedM7ZInKMuRg4I5HBIr0/wALfF2aNxbeJF82M4C3cMYDKS3JdRwQAf4Rn5ehJryqiqjJx2OTF4Chi48tWN/PqvRn1VpuqWOsWa3enXcVzA2PmjbODgHBHUHBHB5Gat18q6bql9o94t3p13LbTrj5o2xkZBwR0IyBweDivUPDfxh/1dt4htvRftluv0GXT/vokr9Atbxqp7nyGN4cr0byoPnX4/8AB/rQ9aoqG1ure9t0uLS4iuIHztkicOrYODgjg8gipq1PnWmnZhTJYo54XhmjSSKRSro4yrA8EEHqKfRQJOx534k+Eul6l5lxpD/2ddHLeXjdC55PTqmSQOOABwteP6voOqaDcCDVLKW2dvulhlX4BO1hkNjIzg8Zr6kqG6tbe9t3t7u3iuIHxujlQOrYORkHg8gGspUk9j38BxBiMP7tX34+e6+f+f4HyhRXsfib4Q2ssMt14ekeGZVyLOVtyORjhWJyp4J5JBJH3RXk+paXfaPeNaajaS2065+WRcZGSMg9CMg8jg4rCUHHc+wwWY4fGRvSlr2e/wDXpoVKKKKk7gooooAKKKKACiiigDR0jXtU0G4M+l3sts7feCnKvwQNynIbGTjI4zXsHhv4taXqXl2+rp/Z10cL5md0LngdeqZJJ54AHLV4dRVRm47Hn47K8NjF+8Wvdb/8H5n1f9qt/sf2z7RF9l8vzfO3jZsxndu6YxzmuB8SfFrS9N8y30hP7RuhlfMzthQ8jr1fBAPHBB4avDqKt1m9jysNwzQpy5qsnJdtvv1/yNHV9e1TXrgT6pey3Lr90McKnAB2qMBc4GcDnFZ1FFZbn0cIRhFRgrJdgooooKCiiigAooooAKKKt6bpd9rF4tpp1pLcztj5Y1zgZAyT0AyRyeBmgUpKK5pOyKlaOkaDqmvXBg0uyluXX7xUYVOCRuY4C5wcZPOK9K8N/B7/AFdz4hufRvsdu30OHf8A76BC/UNXqlra29lbpb2lvFbwJnbHEgRVycnAHA5JNaxpN7nzmP4jpUvdw65n36f8H+tTzbw98HrO22za/c/a5P8An3gYrGOo5bhm/hPG3BHcV6ZFFHBCkMMaRxRqFREGFUDgAAdBT6K3jFR2PkcXja+LlzVpX/JfIKKKKo5AoorhvEPxS0LRt0Vk39p3Q/hgcCMdDzJyOhP3Q3IwcUm0tzfD4WtiZclGLb/rfsdtLLHBC800iRxRqWd3OFUDkkk9BXn3iT4taXpvmW+kJ/aN0Mr5mdsKHkder4IB44IPDV5Pr3irWfEkxbUrx3iDbkt0+WJOuMKO43EZOTjvWNWEqz6H12C4apwtLEvmfZbffu/wNfxB4l1TxNeLcanceZsyIo1G1IgTnCj8hk5JwMk4rIoorFu59LTpwpxUIKyXRBRRRQWFFFFABRRRQAUUUUAFFFFAFvS9SuNH1S21G0bbPbyB15IBx1BwQcEZBHcE19J+GvEFv4m0KDU7dfL35WSIsGMTjqpx+Y6ZBBwM18w133wp8RTab4lTSpJsWN9ldjuFVJcZVhnucbcDGcjrgCtKUrOx4OfZesRQdWK96Gvy6r9T3eiiiuo+APlXVb7+09Yvb/y/L+1XEk2zdnbuYnGe+M1UoorhP1yMVFKK2QUUUUDCiiigDc0jwd4g123Nxp2mSywDpIzLGrckfKWIDcgg4zjvWTdWtxZXD293by286Y3RyoUZcjIyDyOCDX1Ta2sNlZwWlumyCCNY41yTtVRgDJ5PArO8QeGtL8TWa2+p2/mbMmKRTteIkYyp/I4OQcDIOK3dHTQ+QpcUP2r9pD3PLdfo/wAD5hor0TxJ8JdU03zLjSH/ALRtRlvLxtmQcnp0fAAHHJJ4WvPpYpIJnhmjeOWNiro4wykcEEHoaxcWtz6bDYyhio81GV/z+4ZRRRSOkKKKKACiiigAooooA0dI17VNBuDPpd7LbO33gpyr8EDcpyGxk4yOM16r4e+MNnc7Ydftvskn/PxApaM9TyvLL/CON2SewrxmiqjNx2ODGZZhsYv3sde60f8AXrc+r7W6t723S4tLiK4gfO2SJw6tg4OCODyCKmr5h8P+JdU8M3jXGmXHl78CWNhuSUA5ww/MZGCMnBGa9a8N/FrS9S8u31dP7OujhfMzuhc8Dr1TJJPPAA5at41U9z4/HZBiMO3Kl78fLf7v8j0SimRSxzwpNDIkkUihkdDlWB5BBHUU+tTwWrBVTUtLsdYs2tNRtIrmBs/LIucHBGQeoOCeRyM1booHGTi+aLszyLxR8IWRXuvDkjyHcP8AQpmGQCTna5I4GRw3OAfmJ4ry26tbiyuHt7u3lt50xujlQoy5GRkHkcEGvq+s7V9B0vXrcQapZRXKL90sMMnIJ2sMFc4GcHnFYypJ7H0mA4jq0vcxC5l36/8AB/rU+W6K9M8TfCK6sIZbvQ7h7yFF3G2lH77Ax90gYc/eOMA8ADca82likgmeGaN45Y2KujjDKRwQQehrCUXHc+uwuNoYuPNRlf8ANfIZRRRSOoKKKKACiiigAooooAKKKKACiiigAoop8UUk8yQwxvJLIwVEQZZieAAB1NAN2GVNa2txe3CW9pby3E752xxIXZsDJwByeATXoPhf4TahqLJc64XsbMqSIlYee2QCOMEKOec88YwM5r13SNB0vQbcwaXZRWyN94qMs/JI3MclsZOMnjNaRpN7ngY/iDD4f3KXvy8tvv8A8jy3wz8IbqWaK68QyJDCrZNnE253AzwzA4UcA8Ekgn7pr1jTdLsdHs1tNOtIraBcfLGuMnAGSepOAOTycVborojBR2Pj8bmOIxkr1Zadlt/XrqFFFFUcIUUVyXiT4i6F4e8yHzvtt8uR9ntyDtYZGHbovIwRywz0pNpbm1DD1a8uSlFtnW1x/ij4jaN4cV4YpEv9QVgptoX4Xkg7nwQpGDxyc44wc15P4k+Iuu+IfMh877FYtkfZ7ckblORh26twcEcKcdK5KsZVv5T6nA8NbTxT+S/V/wCX3nReIfG+u+Jd0d7deXan/l1gBSPt1GctyoPzE4PTFc7RRWDbe59VSo06MeSnFJeQUUUUGgUUUUAFFFFABRRRQAUV0Xh7wRrviXbJZWvl2p/5epyUj79DjLcqR8oOD1xXRa58IdX063ludPuotRjjj3mMIUlY55CryDxz1yeQBnGaUJNXscVTMcJSqeynUSl/W/b5nndFFFSdoUUUUAFPilkgmSaGR45Y2DI6HDKRyCCOhplFANXPqrSr7+09Hsr/AMvy/tVvHNs3Z27lBxnvjNFcp8Kb2O68B20KK4a0mlhcsOCS2/j2w4/HNFdsXdXPyrF0fYYidLs2jwCiiiuI/VQooooAKKKKAPrWiiiu4/IgrA8SeDdG8Uqp1CF1uEXalxC22RRnOO4I69QcZOMZrfopNJ7mlKrUozU6bs12PA/EPwt13Rt0tkv9p2o/igQiQdBzHyepP3S3AycVw1fWtcr4o8AaN4oZ7mVXttQKgC6h6nAIG5ejDkehwAMgVjKj/KfU4DiVr3MWvmv1X+X3HzpRXW+JPh1rvh7zJvJ+22K5P2i3BO1Rk5deq8DJPKjPWuSrFprc+roYilXjz0pJoKKKKRqFFFFABRRRQAUUUUAbOg+KtZ8NzBtNvHSItue3f5on6Zyp7naBkYOO9ex+HviloWs7Yr1v7Muj/DO4MZ6niTgdAPvBeTgZrwOirjNxPMx2U4bGazVpd1v8+59a0V82eHvG+u+GtsdldeZaj/l1nBePv0GcryxPykZPXNex+F/iNo3iNUhlkSw1BmKi2mfhuQBtfADE5HHBznjAzW8aikfHY/I8ThPeXvR7r9V/w68zsKKKK0PGCsbXvCujeJISupWaPKF2pcJ8sqdcYYdhuJwcjPatmik1fcunUnSkpwdn5Hhfij4VanpCvdaUz6jahh+6VD56Ak4+UfeA+XJHPP3QBmvPq+ta53xD4I0LxLukvbXy7o/8vUBCSdupxhuFA+YHA6YrGVH+U+owHEso+5ilfzW/zR82UV2fin4bav4bQ3MR/tCxGcywxkNGAuSXXnaOvOSOOcZArjKxaa0Z9Zh8TSxEOelK6CiiikbBRRRQAUUUUAFFdn4W+G2r+JEFzKf7PsTjEs0ZLSArkFF43DpzkDnjOCK9g8PeCNC8NbZLK18y6H/L1OQ8nfocYXhiPlAyOua0jTcjxsdnmGwrcV70uy/V/wDDnlXhb4W6prDifVll02zGCA6fvZPmwQFPKcA8sO4wCK9e0Hwro3huELptmiSldr3D/NK/TOWPY7QcDAz2rZoreMFE+Ox2bYnGO03aPZbf8H5hRRRVnmBRRWNr3irRvDcJbUrxElK7kt0+aV+uMKOx2kZOBnvSbtuXTpzqyUIK78jZrnfEPjfQvDW6O9uvMuh/y6wAPJ26jOF4YH5iMjpmvLfFHxV1PV1e10pX061LD96rnz3AJx8w+6D8uQOePvEHFefVjKt/KfUYDhqUvfxTt5Lf5s7nxD8Utd1ndFZN/Zlqf4YHJkPQ8ycHqD90LwcHNcNRRWLbe59Xh8LRw0eSjFJf1v3CiiikbhRRRQAUUUUAFFFFABRWzoPhXWfEkwXTbN3iDbXuH+WJOmcse43A4GTjtXrHhv4S6Xpvl3Grv/aN0MN5eNsKHg9Or4II54IPK1UYOWx5uNzXDYTScry7Lf8A4HzPKvDnhLV/FFx5enwYhGd9zKCsSEAHBYA88jgZPOemTXsHh74W6Fo22W9X+07ofxToBGOo4j5HQj7xbkZGK7aKKOCFIYY0jijUKiIMKoHAAA6Cn10RppHx+Pz3E4n3YPkj2W/zYUUUVoeIeB/FjTbfT/GjPbrs+1263EigAAOSykjA77cn1JJrhq9E+Mv/ACN9p/14J/6MkrzuuOfxM/Tcqk5YKk32CiiipPQCiiigD3H4Nf8AIoXf/X+//ouOij4Nf8ihd/8AX+//AKLjorrp/Cj80zf/AH6r6nh1FFFch+lhRRRQAUUUUAfWtFFFdx+RBRRRQAUUUUAFcl4k+HWheIfMm8n7FfNk/aLcAbmOTl16Nyck8Mcda62ik0nubUMRVoS56UmmfNniHwRrvhrdJe2vmWo/5eoCXj7dTjK8sB8wGT0zXO19a1w3iH4W6FrO6WyX+zLo/wAUCAxnoOY+B0B+6V5OTmsJUf5T6zBcTRdo4pW81+q/yv6HgdFbniPwlq/he48vUIMwnGy5iBaJyQTgMQOeDwcHjPTBrDrFq259RSqwqxU6bumFFFFBYUUUUAFFFFABRRRQB1vhv4i674e8uHzvttiuB9nuCTtUYGEbqvAwByoz0r1vw38RdC8Q+XD532K+bA+z3BA3McDCN0bk4A4Y46V870VcajieRjckwuKvK3LLuv1XU+taK8D8PfFLXdG2xXrf2naj+GdyJB1PEnJ6kfeDcDAxXrXh7xvoXiXbHZXXl3R/5dZwEk79BnDcKT8pOB1xXRGopHxuNyfFYS8pK8e6/XsdFRRRVnlhXK698O/D3iCY3E1s9rcs255rQhGfqTuBBUkk5Jxngc11VFJpPc1o16tCXPSk0/I8U1L4Navb7m07ULW7RYy22QGJ2bn5QOR6clh17da5e+8B+KdP8vztEun35x5AE2MY67Ccde/WvpOis3Rie5R4lxcNJpS+Vn+Gn4HzD/wiviL/AKAOqf8AgHJ/hVux8B+KdQ8zydEuk2Yz54EOc56byM9O3SvpOil7FdzaXFFe3uwV/meKab8GtXuNrajqFraI0YbbGDK6tx8pHA9eQx6d+teg6D8O/D3h+YXENs91cq25Jrsh2ToRtAAUEEZBxnk811VFWqcUeXic4xmJXLOdl2WgUUUVZ5gUUVR1bWdP0KxN7qd0lvbhgu5gSST0AAySfoOgJ7UFRhKclGKu2XqztX17S9BtxPql7FbI33Qxyz8gHaoyWxkZwOM15V4h+MN5c7odAtvskf8Az8TqGkPQ8Lyq/wAQ53ZB7GvNrq6uL24e4u7iW4nfG6SVy7NgYGSeTwAKxlWS2PpMFw3VqWliHyrt1/yX4+h6D4o+LOoaiz22hh7GzKgGVlHntkEHnJCjnjHPGcjOK87llknmeaaR5JZGLO7nLMTySSepplFYOTlufXYXB0MLHloxt+b9WFFFFI6QooooAKKKKACiiigAoq3pul32sXi2mnWktzO2PljXOBkDJPQDJHJ4Ga9S8L/CFUZLrxHIkg2n/QoWOASBjc4I5GTwvGQPmI4qowctjixmY4fCRvVlr26/d/SPM9I0HVNeuDBpdlLcuv3iowqcEjcxwFzg4yecV6r4e+D1nbbZtfuftcn/AD7wMVjHUctwzfwnjbgjuK9JtbW3srdLe0t4reBM7Y4kCKuTk4A4HJJqat40ktz4/G8Q4iveNH3I/j9/T5feMiijghSGGNI4o1CoiDCqBwAAOgp9FFanz7dwooooAKKKKAPDvjL/AMjfaf8AXgn/AKMkrzuvRPjL/wAjfaf9eCf+jJK87rjqfEz9Myj/AHGl6BRRRUnohRRRQB7j8Gv+RQu/+v8Af/0XHRR8Gv8AkULv/r/f/wBFx0V10/hR+aZv/v1X1PDqK2fFukrofivUtOQIsUUxMSqxYLGwDIMnnIVgD7+tY1cjVtD9IpVI1IKpHZq/3hRRRQWFFFanhzSW13xFYaYA5WeYCTYwDCMcuQTxkKCfw70LUmpONOLnLZan1DRRRXcfkgUUUUAFFFFABRRRQAUUUUAMlijnheGaNJIpFKujjKsDwQQeorz7xJ8JdL1LzLjSH/s66OW8vG6FzyenVMkgccADha9EopOKe504bGV8LLmoyt+X3HzHr3hXWfDcxXUrN0iLbUuE+aJ+uMMO52k4ODjtWNX1fdWtve27293bxXED43RyoHVsHIyDweQDXm3iH4PWdzum0C5+ySf8+87Foz0HDcsv8R53ZJ7CsJUmtj63AcSUqnuYlcr7rb/NfkeM0Vo6voOqaDcCDVLKW2dvulhlX4BO1hkNjIzg8ZrOrHY+lhOM4qUHdPsFFFFBQUUUUAFFFFABT4pZIJkmhkeOWNgyOhwykcggjoaZRQDVz0/wd8VprP8A0LxHJLcQfKsV0qgvH0Hz92GOc8t1+9nj2OKWOeFJoZEkikUMjocqwPIII6ivk2u78AeP5PDcy6dqLPJpMjcHq1sT/Eo7r6r+I5yG2p1LaM+WzfIozTrYVWl1Xf08/wA/U96opkUsc8KTQyJJFIoZHQ5VgeQQR1FProPi2rBRRRQAUUUUAFFFFABVe/v7XS7Ga9vZ0gtoV3PI3QD+p7ADkngVl+KfFNj4U0s3d2d8z5WC3U4aVv6AcZPb3JAPz74g8S6p4mvFuNTuPM2ZEUajakQJzhR+Qyck4GScVnOoons5Xk1XG++3yw79/T/P8z0TxJ8Yf9ZbeHrb1X7ZcL9RlE/75ILfQrXl+papfaxeNd6jdy3M7Z+aRs4GScAdAMk8DgZqpRXPKblufb4TL8PhFalHXv1+8KKKKk7QooooAKKKKACiiigAoqa1tbi9uEt7S3luJ3ztjiQuzYGTgDk8AmvSfD3wevLnbNr9z9kj/wCfeBg0h6jluVX+E8bsg9jTjFy2OTFY7D4SN60reXV/I82tbW4vbhLe0t5bid87Y4kLs2Bk4A5PAJr1Lwv8IWdUuvEcjxncf9ChYZIBGNzgng4PC84I+YHivTNI0HS9BtzBpdlFbI33ioyz8kjcxyWxk4yeM1o1vGklufJY/iOrV9zDrlXfr/wP61Kmm6XY6PZraadaRW0C4+WNcZOAMk9ScAcnk4q3RRWx83KTk+aTuwooooEFFFFABRRRQAUUUUAeHfGX/kb7T/rwT/0ZJXndeifGX/kb7T/rwT/0ZJXndcdT4mfpmUf7jS9AoooqT0QooooA9x+DX/IoXf8A1/v/AOi46KPg1/yKF3/1/v8A+i46K66fwo/NM3/36r6l74h+CW8U2Md1ZFF1K1UhAQAJlPOwt2PdcnGSc9cjwOWKSCZ4Zo3jljYq6OMMpHBBB6GvrKud8Q+CNC8S7pL218u6P/L1AQknbqcYbhQPmBwOmKmdPm1R6GUZ59Vj7Gsrw6W3X/APmyivUr34K3qQg2Os288u7lZ4TEoHrkFuenGPxplj8FtRk8z7fq9rBjGzyI2l3dc5ztx29fwrH2cux9P/AG3gOXm9p+D/ACtc8ziiknmSGGN5JZGCoiDLMTwAAOpr3H4YeDZNCsX1TUYXi1G6XasbNzHDwcFezEjJznAAHByK2fDngHQvDNx9qtIpZrsZCz3LhmQEAEKAAB35xnkjODiuorWFO2rPms3z1YmDo0FaL3fV+XoFFFFbHzYUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBDdWtve27293bxXED43RyoHVsHIyDweQDXlvij4Qq7PdeHJEjG0f6FMxwSAc7XJPJwOG4yT8wHFesUVMoqW52YPH18JLmoyt5dH8v6Z8q6lpd9o941pqNpLbTrn5ZFxkZIyD0IyDyODiqlfVWpaXY6xZtaajaRXMDZ+WRc4OCMg9QcE8jkZry3xR8IWRXuvDkjyHcP9CmYZAJOdrkjgZHDc4B+YnisJUmtj6/A8RUK1oV1yPv0/wCB8/vPJ6KmurW4srh7e7t5bedMbo5UKMuRkZB5HBBqGsj6JNNXQUUUUAFFFFABRRRQB6f8KfGP2O4Tw5e/6i4kJtpWf/VuR9zk4wxHGP4j0O7j2avkqvpPwR4h/wCEl8L217I2bpP3Nzx/y0UDJ6AcghuOBux2ropTvoz4viPL1TksVTWj39e/z/rc6Kiiitj5YKKKKACsjxL4gt/DOhT6ncL5mzCxxBgplc9FGfzPXABODitevnr4jeKG8R+InihkRtPsmaK3KgfMeN75BOQSvHbAHAOaicuVHqZTl7xuIUX8K1f+XzMDXNcvvEOqS6hqEu+Z+Ao4WNeyqOwH+JOSSazqKK5Nz9HhCMIqMVZIKKKKCgooooAKKKKACiiu58PfC3XdZ2y3q/2Zan+KdCZD1HEfB6gfeK8HIzTSb2MMRiqOGjz1pJL+tu5xMUUk8yQwxvJLIwVEQZZieAAB1Neg+G/hLqmpeXcau/8AZ1qcN5eN0zjg9OiZBI55BHK16r4c8JaR4Xt/L0+DMxzvuZQGlcEg4LADjgcDA4z1ya3K3jRXU+Sx3EtSV4YZWXd7/d0/ExtB8K6N4bhC6bZokpXa9w/zSv0zlj2O0HAwM9q2aKK1StsfM1Kk6snObu/MKKKKZAUUUUAFFFFABRRRQAUUUUAFFFFAHh3xl/5G+0/68E/9GSV53Xonxl/5G+0/68E/9GSV53XHU+Jn6ZlH+40vQKKKKk9EKKKKAPcfg1/yKF3/ANf7/wDouOij4Nf8ihd/9f7/APouOiuun8KPzTN/9+q+p6JRRRVnmhRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAZ2r6DpevW4g1SyiuUX7pYYZOQTtYYK5wM4POK8q8Q/B68tt02gXP2uP/AJ952CyDoOG4Vv4jztwB3NezUVMoKW534PM8Tg3+6lp2eq/r0sfJssUkEzwzRvHLGxV0cYZSOCCD0NMr6c17wro3iSErqVmjyhdqXCfLKnXGGHYbicHIz2rwjxl4NuvB99DFLOlzbXCkwzqNpYjG4FcnBGR6ggj3A5503HU+1y3OqONfs2uWfbv6M5qiiisz2QooooAK9B+EOrNZeK5NOYv5V/CQFVQR5iAsCT1A27xx3I/Dz6rGn3smm6la30Ko0ttMkyBxlSVIIzjtxTi7O5zY3DrE4edF9V+PT8T6tooortPysKKKKAOd8c6x/Yng7ULpH2TvH5MOJdjb3+UFT1yoJbj+6enWvmyvXfjVfsIdJ05J02s0k8sIxuyMKjHuBzIPQ8+leRVy1XeVj77hzDqng/adZO/yWn9eoUUUVme+FFFFABRRXVeF/AGs+KFS5iVLbTyxBupuhwQDtXqx5PoMgjINNJvRGVevSoQ56srI5Wut8N/DrXfEPlzeT9isWwftFwCNynByi9W4OQeFOOtet+G/h1oXh7y5vJ+23y4P2i4AO1hg5Rei8jIPLDPWutraNH+Y+WxvE28cKvm/0X+f3HO+HvBGheGtslla+ZdD/l6nIeTv0OMLwxHygZHXNdFRRWySWx8pVrVK0uepJt+YUUUUzMKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPDvjL/wAjfaf9eCf+jJK87r0T4y/8jfaf9eCf+jJK87rjqfEz9Myj/caXoFFFFSeiFFFFAHuPwa/5FC7/AOv9/wD0XHRR8Gv+RQu/+v8Af/0XHRXXT+FH5pm/+/VfU9EoooqzzQooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigArG8VaDH4k8O3WmsEErLugdv4JBypzg4HY4GcEjvWzRSavoXTqSpTU4PVanybLFJBM8M0bxyxsVdHGGUjggg9DTK3/G9lJYeN9YhlZCzXLTAqeMSfOPxwwz71gVxNWdj9Wo1FVpxqLqk/vCiiig0CiiigD6c8IyxzeDdFaKRHUWUKkqcjKoAR9QQQfcVs1yXwy/5J5pf/bX/wBGvXW12x2R+V42HJiake0n+YUUUUzmPDvjL/yN9p/14J/6MkrzuvRPjL/yN9p/14J/6MkrzuuOp8TP0zKP9xpegUUUVJ6IUUUUAelfCfwpb6tcXWrajbRXFpB+5ijlUMrSEAkkZ/hUjqCPnyOVr2uvO/g1/wAihd/9f7/+i469Errpq0T85zytOpjZqT0WiCiiirPICiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPDvjL/yN9p/14J/6MkrzuvRPjL/yN9p/14J/6MkrzuuOp8TP0zKP9xpegUUUVJ6IUUUUAe4/Br/kULv/AK/3/wDRcdFHwa/5FC7/AOv9/wD0XHRXXT+FH5pm/wDv1X1PRKKKKs80KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPnf4m/8lD1T/tl/6KSuSrrfib/yUPVP+2X/AKKSuSrjl8TP1LL/APdKX+GP5IKKKKk6wooooA+iPhl/yTzS/wDtr/6Neutrkvhl/wAk80v/ALa/+jXrra7I/Cj8uzD/AHur/il+bCiiiqOM8O+Mv/I32n/Xgn/oySvO69E+Mv8AyN9p/wBeCf8AoySvO646nxM/TMo/3Gl6BRRRUnohRRRQB7j8Gv8AkULv/r/f/wBFx16JXnfwa/5FC7/6/wB//RcdeiV10/hR+aZv/v1X1CiiirPNCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPDvjL/yN9p/14J/6MkrzuvRPjL/yN9p/14J/6MkrzuuOp8TP0zKP9xpegUUUVJ6IUUUUAdz4M+In/CI6PNYf2V9r8y4M2/7R5eMqoxjaf7v60Vw1FWqkkrI8ytk+CrTdSpC7e+r/AMz61oornfEPjfQvDW6O9uvMuh/y6wAPJ26jOF4YH5iMjpmuptLc/OaVGpWlyU4tvyOiorxm++NOoyeX9g0i1gxnf58jS7umMY247+v4UWPxp1GPzPt+kWs+cbPIkaLb1znO7Pb0/Go9rE9b/V/H8t+Vel1/w34ns1Fcv4c8faF4muPstpLLDdnJWC5QKzgAElSCQe/Gc8E4wM11FWmnseVWoVKEuSrFp+YUUUUzIKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPnf4m/8lD1T/tl/wCikrkq634m/wDJQ9U/7Zf+ikrkq45fEz9Sy/8A3Sl/hj+SCiiipOsKKKKAPoj4Zf8AJPNL/wC2v/o1662uS+GX/JPNL/7a/wDo1662uyPwo/Lsw/3ur/il+bCiiiqOM8O+Mv8AyN9p/wBeCf8AoySvO69E+Mv/ACN9p/14J/6MkrzuuOp8TP0zKP8AcaXoFFFFSeiFFFFAHuPwa/5FC7/6/wB//RcdeiV538Gv+RQu/wDr/f8A9Fx16JXXT+FH5pm/+/VfUKKKKs80KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA8O+Mv/I32n/Xgn/oySvO69E+Mv8AyN9p/wBeCf8AoySvO646nxM/TMo/3Gl6BRRRUnohRRRQAUUUUAe//EPxs3haxjtbII2pXSkoSQRCo43le57LkYyDnpg+ByyyTzPNNI8ksjFndzlmJ5JJPU1ueNdXk1rxdqNy0ySxJM0MBjbcnlqSF28ng43ccEsT3rAq6kuZnl5RgIYTDrT3nq3+nyCiiioPUCvcfhf4zuNet5dJ1KTzLy1jDxzHJaWPODu4xlSVGc5O4dwSfDq0dB1ebQdds9UgG57eTcV4G9Twy5IOMqSM44zVQlys8/M8DHGYdwt7y29f+Dsz6kooorsPzIKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPnf4m/wDJQ9U/7Zf+ikrkq634m/8AJQ9U/wC2X/opK5KuOXxM/Usv/wB0pf4Y/kgoooqTrCiiigD6I+GX/JPNL/7a/wDo1662uS+GX/JPNL/7a/8Ao1662uyPwo/Lsw/3ur/il+bCiiiqOM8O+Mv/ACN9p/14J/6MkrzuvRPjL/yN9p/14J/6MkrzuuOp8TP0zKP9xpegUUUVJ6IUUUUAe4/Br/kULv8A6/3/APRcdeiV538Gv+RQu/8Ar/f/ANFx16JXXT+FH5pm/wDv1X1CiiirPNCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPDvjL/AMjfaf8AXgn/AKMkrzuvTPjRZSJr2m3xZPKmtjCoB+YFGJOfb94P1rzOuSp8TP0vJ2ngabXYKKKKg9IKKKKACiiigAooooAKKKKACiiigD61oooruPyIKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPnf4m/8lD1T/tl/6KSuSrrfib/yUPVP+2X/AKKSuSrjl8TP1LL/APdKX+GP5IKKKKk6wooooA+iPhl/yTzS/wDtr/6Neutrkvhl/wAk80v/ALa/+jXrra7I/Cj8uzD/AHur/il+bCiiiqOM8O+Mv/I32n/Xgn/oySvO69E+Mv8AyN9p/wBeCf8AoySvO646nxM/TMo/3Gl6BRRRUnohRRRQB7j8Gv8AkULv/r/f/wBFx16JXnfwa/5FC7/6/wB//RcdeiV10/hR+aZv/v1X1CiiirPNCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPJfjb/zAv+3j/wBp15JXrfxt/wCYF/28f+068krkq/Ez9GyH/kX0/n/6UwoooqD1wooooAKKKKACiiigAooooAKKKKAPrWiiiu4/IgooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA+d/ib/wAlD1T/ALZf+ikrkq634m/8lD1T/tl/6KSuSrjl8TP1LL/90pf4Y/kgoooqTrCiiigD6I+GX/JPNL/7a/8Ao1662uS+GX/JPNL/AO2v/o1662uyPwo/Lsw/3ur/AIpfmwoooqjjPDvjL/yN9p/14J/6MkrzuvRPjL/yN9p/14J/6MkrzuuOp8TP0zKP9xpegUUUVJ6IUUUUAe4/Br/kULv/AK/3/wDRcdeiV538Gv8AkULv/r/f/wBFx16JXXT+FH5pm/8Av1X1CiiirPNCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPJfjb/wAwL/t4/wDadeSV638bf+YF/wBvH/tOvJK5KvxM/Rsh/wCRfT+f/pTCiiioPXCiiigAooooAKKKKACiiigAooooA+pNI17S9etzPpd7Fcov3gpwyckDcpwVzg4yOcVo18oWt1cWVwlxaXEtvOmdskTlGXIwcEcjgkV6r4b+MP8Aq7bxDbei/bLdfoMun/fRJX6Ba6I1U9z4bH8OVaXvYd8y7df+D/Wh61RVewv7XVLGG9sp0ntpl3JIvQj+h7EHkHg1YrY+clFxdnuFFFFAgooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPnf4m/wDJQ9U/7Zf+ikrkq634m/8AJQ9U/wC2X/opK5KuOXxM/Usv/wB0pf4Y/kgoooqTrCiiigD6I+GX/JPNL/7a/wDo1662uS+GX/JPNL/7a/8Ao1662uyPwo/Lsw/3ur/il+bCiiiqOM8O+Mv/ACN9p/14J/6MkrzuvRPjL/yN9p/14J/6MkrzuuOp8TP0zKP9xpegUUUVJ6IUUUUAe4/Br/kULv8A6/3/APRcdeiV538Gv+RQu/8Ar/f/ANFx16JXXT+FH5pm/wDv1X1CiiirPNCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKztX17S9BtxPql7FbI33Qxyz8gHaoyWxkZwOM15P4m+Lt1fwy2mh272cLrtNzKf32Dj7oBwh+8M5J5BG01MpqO56GCyzE4x/u46d3t/wAH5Fz42SxmbRIRIhlVZmZAfmAOwAkeh2n8j6V5PT5ZZJ5nmmkeSWRizu5yzE8kknqaZXLKXM7n6FgML9Uw8aF726+ruFFFFSdYUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBo6Rr2qaDcGfS72W2dvvBTlX4IG5TkNjJxkcZr1rwt8WrPUXFrryRWE5wEnQnynJbGCDkpwRySRwSSOBXilFVGbjsefjcsw2MX7yOvdb/APB+Z9ZRSxzwpNDIkkUihkdDlWB5BBHUU+vmPQfFWs+G5g2m3jpEW3Pbv80T9M5U9ztAyMHHevY/D3xS0LWdsV639mXR/hncGM9TxJwOgH3gvJwM10Rqpnx2PyHE4b3oe/Hy3+aO5ooorQ8MKKKKACiiigAooooAKKKKACiiigAooooAKKKKAPnf4m/8lD1T/tl/6KSuSrrfib/yUPVP+2X/AKKSuSrjl8TP1LL/APdKX+GP5IKKKKk6wooooA+iPhl/yTzS/wDtr/6Neutrkvhl/wAk80v/ALa/+jXrra7I/Cj8uzD/AHur/il+bCiiiqOM8O+Mv/I32n/Xgn/oySvO69E+Mv8AyN9p/wBeCf8AoySvO646nxM/TMo/3Gl6BRRRUnohRRRQB7j8Gv8AkULv/r/f/wBFx16JXnfwa/5FC7/6/wB//RcdeiV10/hR+aZv/v1X1CiiirPNCiiigAooooAKKKKACiiigAooooAKKKKACimSyxwQvNNIkcUalndzhVA5JJPQV534o+LOn6cr22hhL68DAGVlPkLgkHnILHjjHHOcnGKTko7nThcHXxUuWjG/5L1Z6DdXVvZW73F3cRW8CY3SSuEVcnAyTwOSBXlfiT4w/wCstvD1t6r9suF+oyif98kFvoVrzXV9e1TXrgT6pey3Lr90McKnAB2qMBc4GcDnFZ1c8qrex9hgOHKVL3sQ+Z9un/B/rQt6lql9rF413qN3Lcztn5pGzgZJwB0AyTwOBmqlFFZH0cYqK5YqyCiiigYUUUUAFFFFABRRRQB6V4p+Et5pyG60F5b+AZLwOB5qALnIIwH5B4AB5AAPJrziWKSCZ4Zo3jljYq6OMMpHBBB6GvrKsbXvCujeJISupWaPKF2pcJ8sqdcYYdhuJwcjPauiVFPY+KwPElSmlDErmXdb/wDB/A+Y6K7nxD8Ldd0bdLZL/adqP4oEIkHQcx8nqT90twMnFcNWDTW59dh8VRxMeejJNf1v2CiiikbhRRRQAUUUUAFFFFAHVeF/H+s+F1S2iZLnTwxJtZugyQTtbqp4PqMknBNew+F/H+jeKGS2iZ7bUCpJtZupwATtbow5PocAnAFfOlFXGo4nkY7JcNi7ytyy7r9V1/PzPrWivA/D3xS13RtsV639p2o/hnciQdTxJyepH3g3AwMV7HoPirRvEkIbTbxHlC7nt3+WVOmcqew3AZGRnvXRGakfGY7KcTg9Zq8e62+fY2aKKKs8wKKKKACiiigAooooAKKKKACiiigD53+Jv/JQ9U/7Zf8AopK5Kut+Jv8AyUPVP+2X/opK5KuOXxM/Usv/AN0pf4Y/kgoooqTrCiiigD6I+GX/ACTzS/8Atr/6Neutrkvhl/yTzS/+2v8A6Neutrsj8KPy7MP97q/4pfmwoooqjjPDvjL/AMjfaf8AXgn/AKMkrzuvRPjL/wAjfaf9eCf+jJK87rjqfEz9Myj/AHGl6BRRRUnohRRRQB7j8Gv+RQu/+v8Af/0XHXoled/Br/kULv8A6/3/APRcdeiV10/hR+aZv/v1X1CiiirPNCiiigAooooAKKKKACiiigAoorl/FPjvSPCyGOV/tN8cgWsLAsp25Bf+4Dke/OQDg0m0tWa0aFSvNU6SuzqK4bxD8UtC0bdFZN/ad0P4YHAjHQ8ycjoT90NyMHFeYeJPiLrviHzIfO+xWLZH2e3JG5TkYdurcHBHCnHSuSrGVb+U+rwHDSXv4t/Jfq/8vvNzxH4t1fxRceZqE+IRjZbRErEhAIyFJPPJ5OTzjpgVh0UVg3fc+qpUoUoqFNWSCiiigsKKKKACiiigAoop8UUk8yQwxvJLIwVEQZZieAAB1NAN2GVNa2txe3CW9pby3E752xxIXZsDJwByeATXoPhf4TahqLJc64XsbMqSIlYee2QCOMEKOec88YwM5r13SNB0vQbcwaXZRWyN94qMs/JI3MclsZOMnjNaRpN7ngY/iDD4f3KXvy8tvv8A8jyrTfgxfXFmsmo6rFaTtg+THD5u0YHBbcBnORxkcdTRXs1FbeyifNSz/MG7qdvkv8gooorQ8YK5XxR4A0bxQz3MqvbagVAF1D1OAQNy9GHI9DgAZArqqKTSejNaFerQnz0pWZ86eKPAGs+F1e5lVLnTwwAuoegySBuXqp4HqMkDJNcrX1rXDeIfhboWs7pbJf7Muj/FAgMZ6DmPgdAfuleTk5rGVH+U+rwHEqfuYtfNfqv8vuPA6K2de8K6z4bmK6lZukRbalwnzRP1xhh3O0nBwcdqxqwatufVU6kKsVODuvIKKKKCwooooAKKKKACnxSyQTJNDI8csbBkdDhlI5BBHQ0yigGrnpXhb4tXmnILXXklv4BgJOhHmoAuMEHAfkDkkHkkk8CvWtI17S9etzPpd7Fcov3gpwyckDcpwVzg4yOcV8t1YsL+60u+hvbKd4LmFtySL1B/qOxB4I4NaxqtbngY/h+hiLzpe5L8Pu6fL7mfVtFeS+G/jD/q7bxDbei/bLdfoMun/fRJX6Ba9SsL+11SxhvbKdJ7aZdySL0I/oexB5B4NbxkpbHx2My/EYR2rRsu/T7yxRRRVHEFFFFABRRRQAUUUUAfO/xN/wCSh6p/2y/9FJXJV1vxN/5KHqn/AGy/9FJXJVxy+Jn6ll/+6Uv8MfyQUUUVJ1hRRRQB9EfDL/knml/9tf8A0a9dbXJfDL/knml/9tf/AEa9dbXZH4Ufl2Yf73V/xS/NhRRRVHGeHfGX/kb7T/rwT/0ZJXndeifGX/kb7T/rwT/0ZJXndcdT4mfpmUf7jS9AoooqT0QooooA9x+DX/IoXf8A1/v/AOi469Erzv4Nf8ihd/8AX+//AKLjr0Suun8KPzTN/wDfqvqFFFFWeaFFFFABRRRQAUUVnavr2l6DbifVL2K2Rvuhjln5AO1RktjIzgcZo2KhCU5KMFdvsaNY2veKtG8NwltSvESUruS3T5pX64wo7HaRk4Ge9eX+Jvi7dX8Mtpodu9nC67Tcyn99g4+6AcIfvDOSeQRtNebSyyTzPNNI8ksjFndzlmJ5JJPU1jKqlsfTYDhupU9/EvlXZb/8A7jxN8UdZ1eaWDTJX06x3fJ5XEzjjBZweDx0XHUglutcJRRWDk3ufXYfC0cNDkpRsv637hRRRSNwooooAKKKKACiiigAorqPC3gTV/FLiSJPs1iME3UykKw3YIT++Rg+3GCRkV7B4b+HWheHvLm8n7bfLg/aLgA7WGDlF6LyMg8sM9auNNyPJx2dYbCNxb5pdl+r6HmHh74W67rO2W9X+zLU/wAU6EyHqOI+D1A+8V4ORmvYPDnhLSPC9v5enwZmOd9zKA0rgkHBYAccDgYHGeuTW5RXRGCifGY7N8TjPdm7R7L+tQoooqzywooooAKKKKACiiigAooooAZLFHPC8M0aSRSKVdHGVYHggg9RXnHin4S2eoubrQXisJzkvA4PlOS2cgjJTgngAjgAAcmvSqKmUVLc6sLja+Fnz0ZW/J+qPlvV9B1TQbgQapZS2zt90sMq/AJ2sMhsZGcHjNZ1fVt/YWuqWM1lewJPbTLteNuhH9D3BHIPIry3xJ8Hv9Zc+Hrn1b7HcN9ThH/75ADfUtWEqTWx9fgOI6NX3cR7su/T/gf1qeSUVYv7C60u+msr2B4LmFtrxt1B/qO4I4I5FV6yPo4yUldbBRRRQMKKKKACiiigArR0jXtU0G4M+l3sts7feCnKvwQNynIbGTjI4zWdRRsTOEZxcZq6fc9r8LfFqz1Fxa68kVhOcBJ0J8pyWxgg5KcEckkcEkjgV6PFLHPCk0MiSRSKGR0OVYHkEEdRXybWzoPirWfDcwbTbx0iLbnt3+aJ+mcqe52gZGDjvW0azW58zjuG6dRueGfK+z2/4H4n05RXDeHviloWs7Yr1v7Muj/DO4MZ6niTgdAPvBeTgZrua3TT2PkcRha2GlyVotP+tu4UUUUzAKKKKAPnf4m/8lD1T/tl/wCikrkq634m/wDJQ9U/7Zf+ikrkq45fEz9Sy/8A3Sl/hj+SCiiipOsKKKKAPoj4Zf8AJPNL/wC2v/o1662uS+GX/JPNL/7a/wDo1662uyPwo/Lsw/3ur/il+bCiiiqOM8O+Mv8AyN9p/wBeCf8AoySvO69E+Mv/ACN9p/14J/6MkrzuuOp8TP0zKP8AcaXoFFFFSeiFFFFAHuPwa/5FC7/6/wB//RcdeiV538Gv+RQu/wDr/f8A9Fx16JXXT+FH5pm/+/VfUKKKKs80KKKZLLHBC800iRxRqWd3OFUDkkk9BQCVx9Q3V1b2Vu9xd3EVvAmN0krhFXJwMk8DkgV594o+LOn6cr22hhL68DAGVlPkLgkHnILHjjHHOcnGK8i1fXtU164E+qXsty6/dDHCpwAdqjAXOBnA5xWUqqWx7+A4fxGI9+r7kfPf7v8AP7j0rxJ8Yf8AWW3h629V+2XC/UZRP++SC30K15fqWqX2sXjXeo3ctzO2fmkbOBknAHQDJPA4GaqUVhKblufY4TL8PhFalHXv1+8KKKKk7QooooAKKKKACiiigAorR0jQdU164MGl2Uty6/eKjCpwSNzHAXODjJ5xXrHhn4RWthNFd65cJeTI24W0Q/c5GfvEjLj7pxgDgg7hVRg5bHBjczw2DX7yWvZb/wDA+Z5foPhXWfEkwXTbN3iDbXuH+WJOmcse43A4GTjtXsPhn4XaNpEMU+pxJqN9t+fzeYUPOQqEcjnq2egIC9K7iKKOCFIYY0jijUKiIMKoHAAA6Cn10RpJHxuPz7EYn3Ye5Hy3+bCiiitDwwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAM7V9B0vXrcQapZRXKL90sMMnIJ2sMFc4GcHnFeS+KfhLeachutBeW/gGS8DgeagC5yCMB+QeAAeQADya9roqZQUtz0MFmeJwb/dy07Pb/gfI+TZYpIJnhmjeOWNiro4wykcEEHoaZX05r3hXRvEkJXUrNHlC7UuE+WVOuMMOw3E4ORntXjniH4W67o26WyX+07UfxQIRIOg5j5PUn7pbgZOK55Umj7LAZ9hsT7s/cl57fJnDUUUVme2FFFFABRRRQAUUUUAFdV4X8f6z4XVLaJkudPDEm1m6DJBO1uqng+oyScE1ytFNNrVGVehSrw5Ksbo+i/C/j/RvFDJbRM9tqBUk2s3U4AJ2t0Ycn0OATgCuqr5KrufD3xS13RtsV639p2o/hnciQdTxJyepH3g3AwMVtGt/MfKY/hpr38I/k/0f+f3nvlFY2g+KtG8SQhtNvEeULue3f5ZU6Zyp7DcBkZGe9bNbJ32PlalOdKThNWfmfO/xN/5KHqn/AGy/9FJXJVv+NtTj1fxnql5Ds8ozeWjI+9XCAIGBHY7c/j3rArjluz9QwMXDC04y3UV+QUUUUjqCiiigD6I+GX/JPNL/AO2v/o1662uS+GX/ACTzS/8Atr/6Neutrsj8KPy7MP8Ae6v+KX5sKKKKo4zw74y/8jfaf9eCf+jJK87r0T4y/wDI32n/AF4J/wCjJK87rjqfEz9Myj/caXoFFFFSeiFFFFAHuPwa/wCRQu/+v9//AEXHXoleOfCLxRa2LT6DeSJEbmYS2zkYDSEBShOep2rt45ORnJAr2Ouum7xR+cZ3SnTxs3Jb6oKK5fxT470jwshjlf7TfHIFrCwLKduQX/uA5HvzkA4NeP8AiT4i674h8yHzvsVi2R9ntyRuU5GHbq3BwRwpx0olUUR4HJcTi0pJcse7/RdT0/xD8UtC0bdFZN/ad0P4YHAjHQ8ycjoT90NyMHFeP+I/Fur+KLjzNQnxCMbLaIlYkIBGQpJ55PJyecdMCsOiueU3I+zwOUYbB+9BXl3f9aBRRRUHphRRRQAUUUUAFFFFABRT4opJ5khhjeSWRgqIgyzE8AADqa9E8L/CbUNRZLnXC9jZlSRErDz2yARxghRzznnjGBnNNRctjmxWMoYWPNWlb836I8+tbW4vbhLe0t5bid87Y4kLs2Bk4A5PAJr1Xw38Hv8AV3PiG59G+x27fQ4d/wDvoEL9Q1ek6RoOl6DbmDS7KK2RvvFRln5JG5jktjJxk8ZrRreNJLc+Px/EdWr7uHXKu/X/AIH9alTTdLsdHs1tNOtIraBcfLGuMnAGSepOAOTycVboorY+clJyfNJ3YUUUUCCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA5XxR4A0bxQz3MqvbagVAF1D1OAQNy9GHI9DgAZArx7xR4A1nwur3Mqpc6eGAF1D0GSQNy9VPA9RkgZJr6LorOVNSPXwOdYnCWjfmj2f6Pp+XkfJVFe+eIfhboWs7pbJf7Muj/FAgMZ6DmPgdAfuleTk5rxzXvCus+G5iupWbpEW2pcJ80T9cYYdztJwcHHasJQcT7PA5vhsZpB2l2e/y7mNRRRUHphRRRQAUUUUAFFFFAD4pZIJkmhkeOWNgyOhwykcggjoa37rx34mvNLfTbjVpXtXjEbjYoZl9C4G4575PPOc5Nc7RQm0Z1KFKo05xTa2ur2Ciiig0CiiigAooq9o2mSazrVlpsW8NczLGWVN5QE8tjuAMk+woFOShFylsj6L8GWsNp4L0aOBNiNaRyEZJ+ZxvY8+rMT+NblFFdqVlY/J6tR1Kkpvq2/vCiiimZnkvxrtf+QPeLb/APPWKSYJ/ulVLf8AfZA/3vevJK+jfiDoba94OvIIYvMuocXEC/NncvUADqSpYAepH1r5yrlqq0rn3/DtdVMGodYtr79f69AooorM94KKKKACteHxTr9vZi0h1q/jgXbtVbhhtCggBTnIGD0HHA9BjIoovYidOE1aaT9QooooLCiiigAooooAKKKKACiiuo8LeBNX8UuJIk+zWIwTdTKQrDdghP75GD7cYJGRTSb0RlWr06EHUquyRy9dz4e+Fuu6ztlvV/sy1P8AFOhMh6jiPg9QPvFeDkZr0/w38OtC8PeXN5P22+XB+0XAB2sMHKL0XkZB5YZ611tbRo/zHymP4lb9zCL5v9F/n9xh+HPCWkeF7fy9PgzMc77mUBpXBIOCwA44HAwOM9cmtyiitkrbHy1WrOrJzqO7YUUUUzMKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigApksUc8LwzRpJFIpV0cZVgeCCD1FPooBOx5r4p+EtnqLm60F4rCc5LwOD5TktnIIyU4J4AI4AAHJryXV9B1TQbgQapZS2zt90sMq/AJ2sMhsZGcHjNfUlV7+wtdUsZrK9gSe2mXa8bdCP6HuCOQeRWUqSex9BgOIK+HtCr78fx+/r8/vR8pUV634k+D3+sufD1z6t9juG+pwj/98gBvqWryq6tbiyuHt7u3lt50xujlQoy5GRkHkcEGsJRcdz7HB4/D4yN6Mr+XVENFFFSdgUUUUAFFFFABRRRQAUUUUAFeq/B7w7Mby41+4h2wLGYbVnQHexPzMp6jAG3OOdxGeCK4Hw14fuPE2uwaZbt5e/LSSlSwiQdWOPyHTJIGRmvpPS9Nt9H0u2060XbBbxhF4AJx1JwAMk5JPck1rSjd3PnOIcwVKj9Xg/elv5L/AIJbooorpPhQooooAK+cvHfhZvC3iB4oxmxuMy2zANhVz9zJ6leO54IJxnFfRtYHi7wva+KdFktZY0F1GrNazE4McmOMnB+U4AIwePcAiKkeZHrZPmH1KveXwy0f6P5fkfNNFWL+wutLvprK9geC5hba8bdQf6juCOCORVeuQ/RoyUldbBRRRQMKKKKACiiigAooooAKKKvaTo2oa7fCy0y1e4uCpbapAAA6kk4AH1PUgd6BSnGEXKTskUa2dB8K6z4kmC6bZu8Qba9w/wAsSdM5Y9xuBwMnHavTfD3wes7bbNr9z9rk/wCfeBisY6jluGb+E8bcEdxXpkUUcEKQwxpHFGoVEQYVQOAAB0FbRpN7nzOP4kp0/cwy5n3e3/B/rc4fwz8LtG0iGKfU4k1G+2/P5vMKHnIVCORz1bPQEBeld3RRW6ilsfI4jFVsTPnrSu/627BRRRTOcKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKztX0HS9etxBqllFcov3SwwycgnawwVzgZwecVo0UblQnKElKDs12PEfFHwm1DTme50MvfWYUExMw89cAk8YAYccY55xg4zXncsUkEzwzRvHLGxV0cYZSOCCD0NfWVYfiPwlpHii38vUIMTDGy5iAWVACTgMQeOTwcjnPXBrGVFdD6fA8SThaGJV13W/wA+58zUV3eu/CjX9LZnsAmp2wUtuiwkgAAJyhPJ64Clicds4rh5YpIJnhmjeOWNiro4wykcEEHoawcWtz6zD4uhiY81GSf9dVuhlFFFI6AooqxZafe6lMYbG0uLqVV3FIIy7AdM4A6cj86BOSirsr1r+H/DWqeJrxrfTLfzNmDLIx2pECcZY/mcDJODgHFdx4e+D15c7Ztfufskf/PvAwaQ9Ry3Kr/CeN2Qexr1vTdLsdHs1tNOtIraBcfLGuMnAGSepOAOTycVrCk3ufO5hxDRopww/vS79F/n8jO8LeFrHwppYtLQb5nw09www0rf0A5wO3uSSdyiiuhK2iPiatWdWbqVHdsKKKKZmFFFFABRRRQByvjbwTa+LbHcpSDUoVxBcEcEddj+q/qDyO4PguuaHfeHtUl0/UItkychhysi9mU9wf8AEHBBFfUlUdW0bT9dsTZanapcW5YNtYkEEdCCMEH6HoSO9ZzpqWqPcyvO6mD/AHdT3ofivT/I+WKK9P8AEPwevLbdNoFz9rj/AOfedgsg6DhuFb+I87cAdzXn2p6NqejTeVqVjcWrFmVTKhCuV67T0YcjkZHIrncWtz7XC4/DYpXpTTfbr9xRoooqTsCiirdjpWo6n5n2Cwurvy8b/IhaTbnOM4HGcH8qBSkoq8nZFSprW1uL24S3tLeW4nfO2OJC7NgZOAOTwCa9J8PfB68uds2v3P2SP/n3gYNIeo5blV/hPG7IPY16rpGg6XoNuYNLsorZG+8VGWfkkbmOS2MnGTxmtY0m9zwMbxDh6F40ffl+H39fl955n4X+ELOqXXiOR4zuP+hQsMkAjG5wTwcHhecEfMDxXqWm6XY6PZraadaRW0C4+WNcZOAMk9ScAcnk4q3RW8YKOx8fjMxxGLlerLTt0+7+mFFFFUcQUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFV73T7LUoRDfWlvdRK24JPGHUHpnBHXk/nRRSlsdOD/AI8fU+ZvEsUcHinV4YY0jijvZlREGFUByAAB0FZdFFcTP1Gn8C9Du/hPp9lqXim6hvrS3uolsnYJPGHUHegzgjryfzr3S1tbeyt0t7S3it4EztjiQIq5OTgDgckmiit6J8jxLuvVfkyaiiitz5MKKKKACiiigAooooAKKKKACiiigAooooA4H4iaBo1l4E1K4tNIsLedPK2yRWyIy5lQHBAyOCRXhFFFcc9z9Myv+C/X9Ee7/DvQNGvfAmm3F3pFhcTv5u6SW2R2bErgZJGTwAK7uKKOCFIYY0jijUKiIMKoHAAA6Ciit6Z8nnnxv/Ex9FFFanz4UUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQB/9k="
    )


@pytest.mark.selfservice
@pytest.mark.portal
@pytest.mark.development_environment
@pytest.mark.acceptance_environment
def test_admin_sees_correct_tiles_in_selfservice_portal(page, admin_username, admin_password):
    selfservice_portal = SelfservicePortal(page)
    selfservice_portal.navigate()
    selfservice_portal.login(admin_username, admin_password)

    expect(selfservice_portal.my_profile_tile).to_be_visible()
    expect(selfservice_portal.protect_account_tile).to_be_visible()


@pytest.mark.selfservice
@pytest.mark.portal
@pytest.mark.development_environment
@pytest.mark.acceptance_environment
def test_admin_does_not_see_umc_tiles_in_selfservice_portal(page, admin_username, admin_password):
    selfservice_portal = SelfservicePortal(page)
    selfservice_portal.navigate()
    selfservice_portal.login(admin_username, admin_password)

    expect(selfservice_portal.tiles.first).to_be_visible()
    expect(selfservice_portal.umc_tiles_headline).not_to_be_visible()


@pytest.mark.selfservice
@pytest.mark.portal
@pytest.mark.development_environment
@pytest.mark.acceptance_environment
def test_user_sees_correct_tiles_in_selfservice_portal(page, user, user_password, ensure_user_exists):
    username = user.properties["username"]
    ensure_user_exists(username)

    selfservice_portal = SelfservicePortal(page)
    selfservice_portal.navigate()
    selfservice_portal.login(username, user_password)

    expect(selfservice_portal.my_profile_tile).to_be_visible()
    expect(selfservice_portal.protect_account_tile).to_be_visible()


@pytest.mark.selfservice
@pytest.mark.portal
@pytest.mark.development_environment
@pytest.mark.acceptance_environment
def test_anonymous_sees_correct_tiles_in_selfservice_portal(page):
    selfservice_portal = SelfservicePortal(page)
    selfservice_portal.navigate()

    expect(selfservice_portal.my_profile_tile).to_be_visible()
    expect(selfservice_portal.protect_account_tile).to_be_visible()
    expect(selfservice_portal.password_forgotten_tile).to_be_visible()


@pytest.mark.selfservice
@pytest.mark.portal
@pytest.mark.development_environment
@pytest.mark.acceptance_environment
def test_admin_invites_new_user_via_email(
    navigate_to_home_page_logged_in_as_admin,
    dummy_username,
    user_password,
    email_test_api,
    wait_for_ldap_secondaries_to_catch_up,
):
    page = navigate_to_home_page_logged_in_as_admin
    set_new_password_page = SetNewPasswordPage(page)
    recovery_email = f"{dummy_username}@external-domain.test"

    create_user_via_ui_with_email_invitation(page, dummy_username, recovery_email)
    password_reset_link = get_password_reset_link_with_token(email_test_api, recovery_email)
    set_new_password_page.navigate(url=password_reset_link)
    set_new_password_page.set_new_password(password=user_password)
    expect(set_new_password_page.password_change_successful_dialog).to_be_visible()
    wait_for_ldap_secondaries_to_catch_up()

    assert_user_can_log_in(page, dummy_username, user_password)


def get_password_reset_link_with_token(email_test_api, recovery_email):
    email = retrying(email_test_api.get_one_email)(to=recovery_email)
    password_reset_email = PasswordResetEmail(email)
    return password_reset_email.link_with_token


def create_user_via_ui_with_email_invitation(page, dummy_username, recovery_email):
    home_page_logged_in = HomePageLoggedIn(page)
    home_page_logged_out = HomePageLoggedOut(page)

    home_page_logged_in.click_users_tile()
    users_page = UCSUsersPage(home_page_logged_in.page)
    users_page.add_user_button.click()
    users_page.add_user_dialog.add_user(username=dummy_username, invite_email=recovery_email)
    home_page_logged_out.navigate()


def assert_user_can_log_in(page, admin_username, admin_password):
    dummy_user_home_logged_in = HomePageLoggedIn(page)
    dummy_user_home_logged_in.navigate(admin_username, admin_password)
    dummy_user_home_logged_in.reveal_area(
        dummy_user_home_logged_in.right_side_menu,
        dummy_user_home_logged_in.header.hamburger_icon,
    )
    expect(dummy_user_home_logged_in.right_side_menu.logout_button).to_be_visible()


@pytest.mark.selfservice
@pytest.mark.portal
@pytest.mark.development_environment
@pytest.mark.acceptance_environment
def test_user_requests_password_forgotten_link_from_login_page(
    page,
    user,
    email_test_api,
    faker,
    subtests,
    wait_for_ldap_secondaries_to_catch_up,
):
    login_page = LoginPage(page)
    login_page.navigate(cookies_accepted=True)
    login_page.forgot_password_link.click()

    request_token_via_email(page, user)
    assert_token_request_was_successful(page, subtests)

    link_with_token = get_password_reset_link_with_token(email_test_api, user.properties["PasswordRecoveryEmail"])
    assert link_with_token

    new_password = faker.password()
    set_new_password(page, new_password, link_with_token)
    wait_for_ldap_secondaries_to_catch_up()
    assert_password_change_is_successful(page, subtests, user, new_password)


@pytest.mark.selfservice
@pytest.mark.portal
@pytest.mark.development_environment
@pytest.mark.acceptance_environment
def test_user_requests_password_forgotten_via_selfservice_portal(
    page,
    user,
    email_test_api,
    faker,
    subtests,
    wait_for_ldap_secondaries_to_catch_up,
):
    selfservice_portal = SelfservicePortal(page)
    selfservice_portal.navigate()
    selfservice_portal.password_forgotten_tile.click()

    request_token_via_email(page, user)
    assert_token_request_was_successful(page, subtests)

    link_with_token = get_password_reset_link_with_token(email_test_api, user.properties["PasswordRecoveryEmail"])
    assert link_with_token

    new_password = faker.password()
    set_new_password(page, new_password, link_with_token)
    wait_for_ldap_secondaries_to_catch_up()
    assert_password_change_is_successful(page, subtests, user, new_password)


def request_token_via_email(page, user):
    password_forgotten_page = PasswordForgottenPage(page)
    password_forgotten_page.request_token_via_email(user.properties["username"])


def assert_token_request_was_successful(page, subtests):
    password_forgotten_page = PasswordForgottenPage(page)
    with subtests.test(msg="Notification popup is visible"):
        expect(password_forgotten_page.popup_notification_container).to_be_visible()

    with subtests.test(msg="Notification contains success message"):
        notification = password_forgotten_page.popup_notification_container.notification(0)
        expect(notification).to_contain_text("Successfully sent Token")

    with subtests.test(msg="Set new password page is displayed"):
        set_new_password_page = SetNewPasswordPage(page)
        assert set_new_password_page.is_displayed()


def set_new_password(page, new_password, link_with_token):
    page.goto(link_with_token)
    set_new_password_page = SetNewPasswordPage(page)
    set_new_password_page.set_new_password(password=new_password)


def assert_password_change_is_successful(page, subtests, user, new_password):
    set_new_password_page = SetNewPasswordPage(page)
    with subtests.test(msg="Password change is confirmed in UI"):
        expect(set_new_password_page.password_change_successful_dialog).to_be_visible()

    with subtests.test(msg="Login with new password is possible"):
        assert_user_can_log_in(page, user.properties["username"], new_password)


@pytest.mark.selfservice
@pytest.mark.portal
@pytest.mark.development_environment
@pytest.mark.acceptance_environment
def test_user_forced_to_change_password_on_next_login(
    user_password,
    user,
    faker,
    page,
    wait_for_ldap_secondaries_to_catch_up,
    ensure_user_exists: WaitForUserExists,
):
    username = user.properties["username"]

    user.properties["pwdChangeNextLogin"] = True
    user.save()
    wait_for_ldap_secondaries_to_catch_up()
    ensure_user_exists(username)

    home_page_logged_out = HomePageLoggedOut(page)

    # Log out admin
    home_page_logged_out.navigate()

    # Log in as the new user
    login_page = LoginPage(page)
    login_page.navigate()
    login_page.login(username, user_password)

    # Change password
    new_password = faker.password()
    page.get_by_label("Password", exact=True).fill(user_password)
    page.get_by_label("New Password").fill(new_password)
    page.get_by_label("Confirm password").fill(new_password)
    page.get_by_role("button", name="Submit").click()
    wait_for_ldap_secondaries_to_catch_up()

    # Expect to be redirected to the portal home page
    home_page_logged_in = HomePageLoggedIn(page)
    expect(home_page_logged_in.header.hamburger_icon).to_be_visible()

    # Log out
    home_page_logged_in.logout()
    time.sleep(0.1)

    # Try to log in with old password (should fail)
    login_page.navigate()
    login_page.login(username, user_password)
    expect(home_page_logged_in.header.hamburger_icon).not_to_be_visible()

    # Log in with new password (should succeed)
    login_page.login(username, new_password)
    expect(home_page_logged_in.header.hamburger_icon).to_be_visible()
